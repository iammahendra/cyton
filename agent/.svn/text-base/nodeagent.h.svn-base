#ifndef NODE_AGENT_H
#define NODE_AGENT_H

#include "../util/common.h"

typedef struct context {
	struct cyton *cyctx;
	struct axon *axctx;
} context, *context_ptr;

typedef struct func_list {
	int num_recs;
	struct func_rec *func_recs;
} func_list, *func_list_ptr;

typedef struct node_boot {
	int is_control;
	char *bootserver_contact_list;
	char *node_contact_list;
} node_boot, *node_boot_ptr;

typedef struct nodes_state_map {
	char *node_contact_list;
	char *node_coord_contact_list;
	char *node_aggr_contact_list;
	char *node_actu_contact_list;
	char *node_parent_contact_list;
	char* *node_child_contact_list;
} nodes_state_map, *nodes_state_map_ptr;

typedef struct node_monitors_deploy {
	char *node_contact_list;
	int node_type;
	struct stone_context *stone_endpoints;
	struct func_context *func_endpoints;
	struct mon_context *mon_endpoints;
} node_monitors_deploy, *node_monitors_deploy_ptr;

typedef struct node_graph_deploy {
	int graph_id;
	int is_graph_deployed;
	char *node_contact_list;
	int node_type;
	struct stone_context *stone_endpoints;
	struct func_context *func_endpoints;
} node_graph_deploy, *node_graph_deploy_ptr;

typedef struct node_deploy {
	char *node_contact_list;
	char *node_coord_contact_list;
	int node_type; // Node type 0 = normal node, 1 = aggregator and 2 = coordinator
	int query_id;
	int graph_id;
	int num_recs;
	struct func_rec *func_recs;
} node_deploy, *node_deploy_ptr;

struct cyton *cyctx;
struct axon *axctx;

CManager cm;
CMFormat boot_in_format;
CMFormat boot_out_format;
CMFormat actuate_format;
CMFormat node_info_format;
CMFormat live_info_format;
CMFormat control_info_format;
CMFormat node_monitors_deploy_format;
CMFormat node_graph_deploy_format;
CMFormat node_deploy_format;

extern struct cyton *create_cyton_context();
extern struct axon *create_axon_context();

extern int check_if_nodes_deployed_count(struct axon *axctx, int num_to_deploy);
extern int check_is_node_coord(struct cyton *cyctx, char *node_contact_list); 
extern int check_is_node_coord_assigned(struct cyton *cyctx, char *node_contact_list); 
extern int check_is_node_control_comps_assigned(struct cyton *cyctx, char *node_contact_list); 
extern void add_coord_node_child_state(struct axon *axctx, struct node_boot *node_live_info);
extern void update_local_node_state_from_boot(struct cyton *cyctx, struct ret_node_coord_map *bootserver_msg);
extern void update_local_node_state_from_coord(struct cyton *cyctx, struct control_comp * ctrl_cmp);
extern void init_coord_node_state(struct cyton *cyctx, struct axon *axctx);

extern void start_data_collector(char *resource_type);
extern void start_data_sampling(char *resource_type, char *sample_attrs, int sample_period);
extern void create_monitors_stream(CManager cm, char *mon_type, char *resource_type, char *mon_metric, struct stone_context *stone_ctx, 
struct func_context *func_ctx, struct mon_context *mon_ctx, struct sample_context *sample_ctx); 
extern void register_monitors_to_axon(struct axon *axctx, char *node_contact_list, char *key, char *mon_attr, EVstone split_stone, 
EVaction split_action, char *out_format);

extern void update_coord_graph_deployed_state(struct axon *axctx, struct node_graph_deploy *node_graph_deploy_data);
extern void create_aggregator_streams_network(CManager cm, struct axon *axctx, struct query_ctx *qctx);

extern int realize_vertex(CManager cm, int qid, struct func_rec frec, struct stone_context *stone_ctx, struct func_context *func_ctx, 
struct split_context *split_ctx); 
extern void realize_edge(CManager cm, int qid, struct split_context *split_ctx, int end_stone);

extern void register_nodes_endpoints_for_query(CManager cm, struct axon *axctx, char *node_contact_list, char *coord_contact_list, int qid, 
int num_recs, struct stone_context *stone_ctx, struct func_context *func_ctx);
extern void register_aggregator_endpoints_for_query(CManager cm, struct axon *axctx, char *coord_contact_list, int qid, int num_recs, 
struct stone_context *stone_ctx, struct func_context *func_ctx); 

extern void register_nodes_graph_deployed_for_query(CManager cm, struct axon *axctx, int num_deploy_nodes, char *deploy_contact_list, int qid);
extern void register_aggregator_graph_deployed_for_query(CManager cm, struct axon *axctx, int num_deploy_aggregators, char *deploy_contact_list, 
int qid); 

extern void deploy_monitoring_graph(CManager cm, struct axon *axctx, char *src_contact_list, char *coord_contact_list, int qid, int qtype, 
int graph_id, int num_attrs, char *mon_attrs, int num_funcs, struct func_rec *func_recs);

extern void init_split_context(int num_recs, struct split_context *split_ctx);
extern void init_stone_context(int num_recs, struct stone_context *stone_ctx);
extern void init_func_context(int num_recs, struct func_context *func_ctx); 
extern void init_mon_context(int num_recs, struct mon_context *mon_ctx); 
extern void init_sample_context(int num_recs, struct sample_context *sample_ctx); 
extern void clean_split_context(int num_recs, struct split_context *split_ctx);
extern void clean_stone_context(int num_recs, struct stone_context *stone_ctx);
extern void clean_func_context(int num_recs, struct func_context *func_ctx); 
extern void clean_mon_context(int num_recs, struct mon_context *mon_ctx); 
extern void clean_sample_context(int num_recs, struct sample_context *sample_ctx); 

#endif
