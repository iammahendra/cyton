#include<stdio.h>
#include<stdlib.h>
#include<unistd.h>

#include <libvirt/libvirt.h>
#include <libvirt/virterror.h>
#include <libxml/parser.h>
#include <libxml/tree.h>
#include <libxml/xpath.h>

struct block_device {
	virDomainPtr dom;	/*Domain*/
	char *path;			/*Name of the block device */
};

struct interface_device {
	virDomainPtr dom;	/*Domain*/
	char *path;			/*Name of the interface device */
};

struct domain_info {
	char *domain_name;
	int domain_id;
	unsigned char domain_state;
	unsigned long domain_mem_max;
	unsigned long domain_mem_used;
	unsigned short domain_num_vcpus;
	unsigned long long domain_cpu_total_time;
};

struct domain_disk_info {
	char *domain_name;
	int domain_id;
	unsigned long long domain_vblock_rreq;
	unsigned long long domain_vblock_wreq;
	unsigned long long domain_vblock_rbytes;
	unsigned long long domain_vblock_wbytes;
};

struct domain_interface_info {
	char *domain_name;
	int domain_id;
	unsigned long long domain_if_rxbytes;
	unsigned long long domain_if_txbytes;
	unsigned long long domain_if_rxpackets;
	unsigned long long domain_if_txpackets;
	unsigned long long domain_if_rxerrors;
	unsigned long long domain_if_txerrors;
	unsigned long long domain_if_rxdrops;
	unsigned long long domain_if_txdrops;
};

struct domain_info_list {
	int num_domains;
	struct domain_info *domain_info;
};

struct domain_disk_info_list {
	int num_domains;
	struct domain_disk_info *domain_disk_info;
};

struct domain_interface_info_list {
	int num_domains;
	struct domain_interface_info *domain_interface_info;
};

static virConnectPtr conn = 0;
static virDomainPtr *domains = NULL;
static int nr_domains = 0;

static struct block_device *block_devices = NULL;
static int nr_block_devices = 0;

static struct interface_device *interface_devices = NULL;
static int nr_interface_devices = 0;

static virDomainInfo vir_domain_info; 

int libvirt_init(void) {
	if(virInitialize() != 0) {
		return -1;
	} else {
		return 0;
	}
}

int libvirt_conn_test(void) {
	if(libvirt_init() != 0)
		return 1;
	virConnectPtr conn = virConnectOpenReadOnly("xen:///");
	if(conn == NULL) {
	  printf("libvirt connection open error on uri \n"); 
	  return 1;
	}
	if(conn != NULL) 
		virConnectClose(conn);

	conn = NULL;
	return 0;
}

void free_domains(void) {
	int i;

	if(domains) {
		for(i = 0; i < nr_domains; ++i) {
			virDomainFree(domains[i]);
		}
		free(domains);
	}
	domains = NULL;
	nr_domains = 0;
}

int add_domain(virDomainPtr dom) {
	virDomainPtr *new_ptr;

	int new_size = sizeof(domains[0]) * (nr_domains + 1);

	if(domains) {
		new_ptr = realloc(domains, new_size);
	} else {
		new_ptr = malloc(new_size);
	}

	if(new_ptr == NULL) 
		return -1;
	
	domains = new_ptr;
	domains[nr_domains] = dom;
	return nr_domains++;
}

void free_block_devices(void) {
	int i;
	if(block_devices) {
		for(i = 0; i < nr_block_devices; ++i) {
			free(block_devices[i].path);
		}
		block_devices = NULL;
		nr_block_devices = 0;
	}
}

int add_block_device(virDomainPtr dom, const char *path) {
	struct block_device *new_ptr;

	int new_size = sizeof(block_devices[0]) * (nr_block_devices + 1);
	char *path_copy;

	path_copy = strdup(path);
	if(!path_copy)
		return -1;

	if(block_devices)
		new_ptr = realloc(block_devices, new_size);
	else
		new_ptr = malloc(new_size);

	if(new_ptr == NULL) {
		free(path_copy);
		return -1;
	}

	block_devices = new_ptr;
	block_devices[nr_block_devices].dom = dom;
	block_devices[nr_block_devices].path = path_copy;
	return nr_block_devices++;
}

void free_interface_devices() {
	int i;
	if(interface_devices) {
		for(i = 0; i < nr_interface_devices; ++i) {
			free(interface_devices[i].path);
		}
		interface_devices = NULL;
		nr_interface_devices = 0;
	}
}

int add_interface_device(virDomainPtr dom, const char *path) {
	struct interface_device *new_ptr;

	int new_size = sizeof(interface_devices[0]) * (nr_interface_devices + 1);
	char *path_copy;

	path_copy = strdup(path);
	if(!path_copy)
		return -1;

	if(interface_devices)
		new_ptr = realloc(interface_devices, new_size);
	else
		new_ptr = malloc(new_size);

	if(new_ptr == NULL) {
		free(path_copy);
		return -1;
	}

	interface_devices = new_ptr;
	interface_devices[nr_interface_devices].dom = dom;
	interface_devices[nr_interface_devices].path = path_copy;
	return nr_interface_devices++;
}

int libvirt_open() {
	conn = virConnectOpenReadOnly("xen:///");
	if(conn == NULL) {
	  printf("libvirt connection open error on uri \n"); 
	  return 0;
	}
	int n;
	n = virConnectNumOfDomains(conn);
	if(n < 0) {
		printf("Error reading number of domains \n");
		return -1;
	}

	int i;
	int *domids;

	domids = malloc(sizeof(int) * n);
	if(domids == 0) {
		printf("libvirt domain ids malloc failed");
		return -1;
	}
	n = virConnectListDomains(conn, domids, n);
	if(n < 0) {
		printf("Error reading list of domains \n");
		free(domids);
		return -1;
	}

	free_block_devices();
	free_interface_devices();
	free_domains();

	for (i = 0; i < n ; ++i) {
		virDomainPtr dom = NULL;
		const char *name;
		char *xml = NULL;
		xmlDocPtr xml_doc = NULL;
		xmlXPathContextPtr xpath_ctx = NULL;
		xmlXPathObjectPtr xpath_obj = NULL;
		int j;

		//printf("Publishing Domain Id : %d \n ", domids[i]);
		dom = virDomainLookupByID(conn, domids[i]);
		if(dom == NULL) {
			printf("Domain no longer active or moved away .. \n");
		}
		name = virDomainGetName(dom);
		//printf("Publishing Domain Name : %s \n ", name);
		if(name == NULL) {
			printf("Domain name not valid .. \n");
			goto cont;	
		}
		if(add_domain(dom) < 0) {
			printf("libvirt plugin malloc failed .. \n");
			goto cont;
		}
		xml = virDomainGetXMLDesc(dom, 0);
		if(!xml) {
			printf("Virt domain xml description error ..\n");
			goto cont;
		}
		//printf("Publishing XML : \n %s \n ", xml);

		xml_doc = xmlReadDoc((xmlChar *) xml, NULL, NULL, XML_PARSE_NONET);
		if(xml_doc == NULL) {
			printf("XML read doc error ..\n");
			goto cont;
		}

		xpath_ctx = xmlXPathNewContext(xml_doc);
		xpath_obj = xmlXPathEval((xmlChar *) "/domain/devices/disk/target[@dev]", xpath_ctx);
		if(xpath_obj == NULL || xpath_obj->type != XPATH_NODESET || xpath_obj->nodesetval == NULL) {
			goto cont;
		}

		for(j = 0; j < xpath_obj->nodesetval->nodeNr; ++j) {
			xmlNodePtr node;
			char *path = NULL;
			node = xpath_obj->nodesetval->nodeTab[j];
			if(!node) continue;
			path = (char *) xmlGetProp (node, (xmlChar *) "dev");
			if(!path) continue;
			add_block_device(dom, path);
		}
		xmlXPathFreeObject(xpath_obj);

		xpath_obj = xmlXPathEval((xmlChar *) "/domain/devices/interface/target[@dev]", xpath_ctx);
		if(xpath_obj == NULL || xpath_obj->type != XPATH_NODESET || xpath_obj->nodesetval == NULL) {
			goto cont;
		}

		for(j = 0; j < xpath_obj->nodesetval->nodeNr; ++j) {
			xmlNodePtr node;
			char *path = NULL;
			node = xpath_obj->nodesetval->nodeTab[j];
			if(!node) continue;
			path = (char *) xmlGetProp(node, (xmlChar *) "dev");
			if(!path) continue;
			add_interface_device(dom, path);
		}
		cont:
			if(xpath_obj) xmlXPathFreeObject(xpath_obj);
			if(xpath_ctx) xmlXPathFreeContext(xpath_ctx);
			if(xml_doc) xmlFreeDoc(xml_doc);
			if(xml) free(xml);
	}
	free(domids);
	return 0;
}

int libvirt_read_stats(void) {
	int i;

	printf("Num Domains : %d .. \n", nr_domains);
	for(i = 0; i < nr_domains; ++i) {
		//virDomainInfo info; 
		virVcpuInfoPtr vinfo = NULL;
		int j;
		
		if(virDomainGetInfo(domains[i], &vir_domain_info) != 0) 
			continue;

		vinfo = malloc(vir_domain_info.nrVirtCpu * sizeof vinfo[0]);
		if(vinfo == NULL){
			printf("libvirt plugin malloc failed ..\n");
			continue;
		}
		
		if(virDomainGetVcpus(domains[i], vinfo, vir_domain_info.nrVirtCpu, NULL, 0) != 0) {
			free(vinfo);
			continue;
		}

		for(j = 0; j < vir_domain_info.nrVirtCpu; j++) {
			printf("VCPU number : %u .. \n", (unsigned int) vinfo[j].number);
			printf("VCPU time : %llu .. \n", (unsigned long long) vinfo[j].cpuTime);
		}
		free(vinfo);
	}

	printf("Num Block Devices : %d .. \n", nr_block_devices);
	for(i = 0; i < nr_block_devices; ++i) {
		struct _virDomainBlockStats stats;
		if(virDomainBlockStats(block_devices[i].dom, block_devices[i].path, &stats, sizeof stats) != 0)
			continue;
		if((stats.rd_req != -1) && (stats.wr_req != -1)) {
			printf("Read reqs : %llu \n", (unsigned long long) stats.rd_req);
			printf("Write reqs : %llu \n", (unsigned long long) stats.wr_req);
		}
		if((stats.rd_bytes != -1) && (stats.rd_bytes != -1)) {
			printf("Read bytes : %llu \n", (unsigned long long) stats.rd_bytes);
			printf("Write bytes : %llu \n", (unsigned long long) stats.wr_bytes);
		}
	}

	printf("Num Interface Devices : %d .. \n", nr_interface_devices);
	for(i = 0; i < nr_interface_devices; ++i) {
		struct _virDomainInterfaceStats stats;
		if(virDomainInterfaceStats(interface_devices[i].dom, interface_devices[i].path, &stats, sizeof stats) != 0)
			continue;
		if((stats.rx_bytes != -1) && (stats.tx_bytes != -1)) {
			printf("Recieved bytes : %llu \n", (unsigned long long) stats.rx_bytes);
			printf("Transmitted bytes : %llu \n", (unsigned long long) stats.tx_bytes);
		}
		if((stats.rx_packets != -1) && (stats.tx_packets != -1)) {
			printf("Recieved packets : %llu \n", (unsigned long long) stats.rx_packets);
			printf("Transmitted packets : %llu \n",(unsigned long long) stats.tx_packets);
		}
		if((stats.rx_errs != -1) && (stats.tx_errs != -1)) {
			printf("Recieved errors : %llu \n", (unsigned long long) stats.rx_errs);
			printf("Transmitted errors : %llu \n", (unsigned long long) stats.tx_errs);
		}
		if((stats.rx_drop != -1) && (stats.tx_drop != -1)) {
			printf("Recieved dropped : %ll \n", (unsigned long long) stats.rx_drop);
			printf("Transmitted dropped : %ll \n", (unsigned long long) stats.tx_drop);
		}
	}
}

int libvirt_num_domains() {
	return nr_domains;
}

struct domain_info_list *libvirt_domain_info_list() {
	int i;

	struct domain_info_list *domain_info_list = (struct domain_info_list *) calloc(1, sizeof(struct domain_info_list));
	domain_info_list->num_domains = nr_domains;
	domain_info_list->domain_info = (struct domain_info *) calloc(nr_domains, sizeof(struct domain_info));

	for(i = 0; i < nr_domains; ++i) {
		if(virDomainGetInfo(domains[i], &vir_domain_info) != 0) 
			continue;

		domain_info_list->domain_info[i].domain_name = strdup(virDomainGetName(domains[i]));
		domain_info_list->domain_info[i].domain_id = virDomainGetID(domains[i]);
		domain_info_list->domain_info[i].domain_state = vir_domain_info.state;
		domain_info_list->domain_info[i].domain_mem_max = vir_domain_info.maxMem;
		domain_info_list->domain_info[i].domain_mem_used = vir_domain_info.memory;
		domain_info_list->domain_info[i].domain_num_vcpus = vir_domain_info.nrVirtCpu;
		domain_info_list->domain_info[i].domain_cpu_total_time = vir_domain_info.cpuTime;
	}
	return domain_info_list;
}

struct domain_disk_info_list *libvirt_domain_disk_info_list() {
	int i;

	struct domain_disk_info_list *domain_disk_info_list = (struct domain_disk_info_list *) calloc(1, sizeof(struct domain_disk_info_list));
	domain_disk_info_list->num_domains = nr_domains;
	domain_disk_info_list->domain_disk_info = (struct domain_disk_info *) calloc(nr_domains, sizeof(struct domain_disk_info));

	for(i = 0; i < nr_block_devices; ++i) {
		struct _virDomainBlockStats stats;
		if(virDomainBlockStats(block_devices[i].dom, block_devices[i].path, &stats, sizeof stats) != 0)
			continue;
		domain_disk_info_list->domain_disk_info[i].domain_name = strdup(virDomainGetName(domains[i]));
		domain_disk_info_list->domain_disk_info[i].domain_id = virDomainGetID(domains[i]);
		domain_disk_info_list->domain_disk_info[i].domain_vblock_rreq = (unsigned long long) stats.rd_req;
		domain_disk_info_list->domain_disk_info[i].domain_vblock_wreq = (unsigned long long) stats.wr_req;
		domain_disk_info_list->domain_disk_info[i].domain_vblock_rbytes = (unsigned long long) stats.rd_bytes;
		domain_disk_info_list->domain_disk_info[i].domain_vblock_wbytes = (unsigned long long) stats.wr_bytes;
	}
	return domain_disk_info_list;
}

struct domain_interface_info_list *libvirt_domain_interface_info_list() {
	int i;

	struct domain_interface_info_list *domain_interface_info_list = (struct domain_interface_info_list *) calloc(1, 
	sizeof(struct domain_interface_info_list));
	domain_interface_info_list->num_domains = nr_domains;
	domain_interface_info_list->domain_interface_info = (struct domain_interface_info *) calloc(nr_domains, sizeof(struct domain_interface_info));

	for(i = 0; i < nr_interface_devices; ++i) {
		struct _virDomainInterfaceStats stats;
		if(virDomainInterfaceStats(interface_devices[i].dom, interface_devices[i].path, &stats, sizeof stats) != 0)
			continue;
		domain_interface_info_list->domain_interface_info[i].domain_name = strdup(virDomainGetName(domains[i]));
		domain_interface_info_list->domain_interface_info[i].domain_id = virDomainGetID(domains[i]);
		domain_interface_info_list->domain_interface_info[i].domain_if_rxbytes = (unsigned long long) stats.rx_bytes;
		domain_interface_info_list->domain_interface_info[i].domain_if_txbytes = (unsigned long long) stats.tx_bytes;
		domain_interface_info_list->domain_interface_info[i].domain_if_rxpackets = (unsigned long long) stats.rx_packets;
		domain_interface_info_list->domain_interface_info[i].domain_if_txpackets = (unsigned long long) stats.tx_packets;
		domain_interface_info_list->domain_interface_info[i].domain_if_rxerrors = (unsigned long long) stats.rx_errs;
		domain_interface_info_list->domain_interface_info[i].domain_if_txerrors = (unsigned long long) stats.tx_errs;
		domain_interface_info_list->domain_interface_info[i].domain_if_rxdrops = (unsigned long long) stats.rx_drop;
		domain_interface_info_list->domain_interface_info[i].domain_if_txdrops = (unsigned long long) stats.tx_drop;
	}
	return domain_interface_info_list;
}

int libvirt_num_active_domains(void) {
	int num_domains = virConnectNumOfDomains(conn);
	return num_domains;
}

int libvirt_num_inactive_domains(void) {
	int num_domains = virConnectNumOfDefinedDomains(conn);
	return num_domains;
}

int libvirt_close(void) {
	free_block_devices();
	free_interface_devices();
	free_domains();
	if(conn != NULL)
		virConnectClose(conn);
	conn = NULL;
}

int main(int argc, char **argv) {
	printf (" Test %  ..\n");
	libvirt_open();
	libvirt_init();

	printf("Number of domains   : %d \n", libvirt_domain_interface_info_list()->num_domains); 
	printf("Domain info - name  : %s \n", libvirt_domain_interface_info_list()->domain_interface_info[0].domain_name); 
	printf("Domain info - id    : %d \n", libvirt_domain_interface_info_list()->domain_interface_info[0].domain_id); 
	printf("Domain info - if_rxbytes : %llu \n", libvirt_domain_interface_info_list()->domain_interface_info[0].domain_if_rxbytes); 
	printf("Domain info - if_txbytes : %llu \n", libvirt_domain_interface_info_list()->domain_interface_info[0].domain_if_txbytes); 
	printf("Domain info - if_rxpackets : %llu \n", libvirt_domain_interface_info_list()->domain_interface_info[0].domain_if_rxpackets); 
	printf("Domain info - if_txpackets : %llu \n", libvirt_domain_interface_info_list()->domain_interface_info[0].domain_if_txpackets); 
	printf("Domain info - if_rxerros : %llu \n", libvirt_domain_interface_info_list()->domain_interface_info[0].domain_if_rxerrors); 
	printf("Domain info - if_txerrors : %llu \n", libvirt_domain_interface_info_list()->domain_interface_info[0].domain_if_txerrors); 
	printf("Domain info - if_rxdrops : %llu \n", libvirt_domain_interface_info_list()->domain_interface_info[0].domain_if_rxdrops); 
	printf("Domain info - if_txdrops : %llu \n", libvirt_domain_interface_info_list()->domain_interface_info[0].domain_if_txdrops); 

	printf("Number of domains   : %d \n", libvirt_domain_disk_info_list()->num_domains); 
	printf("Domain info - name  : %s \n", libvirt_domain_disk_info_list()->domain_disk_info[1].domain_name); 
	printf("Domain info - id    : %d \n", libvirt_domain_disk_info_list()->domain_disk_info[1].domain_id); 
	printf("Domain info - block_readreqs : %llu \n", libvirt_domain_disk_info_list()->domain_disk_info[1].domain_vblock_rreq); 
	printf("Domain info - block_writereqs : %llu \n", libvirt_domain_disk_info_list()->domain_disk_info[1].domain_vblock_wreq); 
	printf("Domain info - block_readbytes : %llu \n", libvirt_domain_disk_info_list()->domain_disk_info[1].domain_vblock_rbytes); 
	printf("Domain info - block_writebytes : %llu \n", libvirt_domain_disk_info_list()->domain_disk_info[1].domain_vblock_wbytes); 

	printf("Number of domains   : %d \n", libvirt_domain_info_list()->num_domains); 
	printf("Domain info - name  : %s \n", libvirt_domain_info_list()->domain_info[1].domain_name); 
	printf("Domain info - id    : %d \n", libvirt_domain_info_list()->domain_info[1].domain_id); 
	printf("Domain info - state : %u \n", libvirt_domain_info_list()->domain_info[1].domain_state); 
	printf("Domain info - max mem : %lu \n", libvirt_domain_info_list()->domain_info[1].domain_mem_max); 
	printf("Domain info - mem used : %lu \n", libvirt_domain_info_list()->domain_info[1].domain_mem_used); 
	printf("Domain info - num vcpus : %d \n", libvirt_domain_info_list()->domain_info[1].domain_num_vcpus); 
	printf("Domain info - total cpu time : %llu \n", libvirt_domain_info_list()->domain_info[1].domain_cpu_total_time); 
	libvirt_close();
}
